"use strict";(self.webpackChunksnnax_docs=self.webpackChunksnnax_docs||[]).push([[274],{4940:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=n(4848),s=n(8453);const r={},i="Introduction",l={id:"layers/intro",title:"Introduction",description:"To finalize the model architecture, we need to define the layers that will be used in the model. SNNAX provides a simple way to define these layers. The layers can be from the equinox library, from our custom layers in the SNNAX library, or you can create your own custom layers.",source:"@site/content/300_layers/300_intro.md",sourceDirName:"300_layers",slug:"/layers/intro",permalink:"/snnax/layers/intro",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:300,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Composed",permalink:"/snnax/architecture/composed"},next:{title:"Predefined Layers",permalink:"/snnax/layers/predefined"}},o={},d=[{value:"StatefulLayer",id:"statefullayer",level:2},{value:"Properties",id:"properties",level:3},{value:"Methods",id:"methods",level:3},{value:"Example",id:"example",level:4}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsxs)(t.p,{children:["To finalize the model architecture, we need to define the layers that will be used in the model. SNNAX provides a simple way to define these layers. The layers can be from the ",(0,a.jsx)(t.code,{children:"equinox"})," library, from our custom layers in the SNNAX library, or you can create your own custom layers."]}),"\n",(0,a.jsx)(t.p,{children:"SNNAX provides two ways to define the layers of the model:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"/snnax/layers/intro#statefullayer",children:(0,a.jsx)(t.code,{children:"snnax.snn.layers.StatefulLayer"})}),": to create custom layers."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"/snnax/layers/predefined",children:(0,a.jsx)(t.code,{children:"snnax.snn.layers"})}),": provides classes of predefined layers that can be used to build your model."]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"statefullayer",children:"StatefulLayer"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"StatefulLayer"})," class allows the creation of custom layers with specific properties which enables you to create highly customizable layers, adapting to specific needs of your neural network models. It inherits from ",(0,a.jsx)(t.code,{children:"eqx.Module"})," to be a callable pytree."]}),"\n",(0,a.jsx)(t.h3,{id:"properties",children:"Properties"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"init_fn (Callable)"}),": A function for initializing the state of the layer. If not provided, it defaults to initializing the state with zeros."]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"methods",children:"Methods"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"init_parameters(parameters, shape, requires_grad)"}),": A static method to initialize the parameters of the layer."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"init_state(shape, key, *args, **kwargs)"}),": Initializes the state of the layer, defaults to zeros."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"init_out(shape, key)"}),": Initializes the output of the layer, defaults to zeros."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"__call__(state, synaptic_input, key)"}),": Defines the computation performed at every call of the layer."]}),"\n"]}),"\n",(0,a.jsx)(t.h4,{id:"example",children:"Example"}),"\n",(0,a.jsxs)(t.p,{children:["You can create a custom layer by subclassing the ",(0,a.jsx)(t.code,{children:"StatefulLayer"})," class and defining the ",(0,a.jsx)(t.code,{children:"__init__"}),", ",(0,a.jsx)(t.code,{children:"__call__"}),", ",(0,a.jsx)(t.code,{children:"init_out"}),", or ",(0,a.jsx)(t.code,{children:"init_state"})," methods."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"from snnax import snn\nimport equinox as eqx\nimport jax.numpy as jnp\nfrom jax.random import PRNGKey\n\nclass CustomLayer(snn.layers.StatefulLayer):\n\n    def __init__(self,\n                alpha: float,\n                beta: float,\n                init_fn: Optional[Callable] = None) -> None:\n\n        # Custom initialization function\n        super().__init__(init_fn)\n        self.alpha = self.init_parameters(alpha, (1,), requires_grad=False)\n        self.beta = self.init_parameters(beta, (1,), requires_grad=True)\n\n    def __call__(self,\n                state: Array,\n                synaptic_input: Array, *,\n                key: Optional[PRNGKey] = None) -> Sequence[Array]:\n\n        # Custom neuron dynamics\n        alpha = self.alpha.data[0]\n        beta = self.beta.data[0]\n        mem_pot = state\n        mem_pot = alpha*mem_pot + (1.-alpha)*beta*synaptic_input\n\n        output = mem_pot\n        state = mem_pot\n        return state, output\n\n\ncustom_layer = CustomLayer(alpha=0.9, beta=0.1)\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);