"use strict";(self.webpackChunksnnax_docs=self.webpackChunksnnax_docs||[]).push([[685],{8320:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var t=r(4848),s=r(8453);const i={},l="Introduction",a={id:"architecture/intro",title:"Introduction",description:"To customize a model's architecture, SNNAX provides a simple way to define the structure of the model.",source:"@site/content/200_architecture/200_intro.md",sourceDirName:"200_architecture",slug:"/architecture/intro",permalink:"/snnax/architecture/intro",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:200,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Structure",permalink:"/snnax/gettingStarted/structure"},next:{title:"Composed",permalink:"/snnax/architecture/composed"}},c={},d=[{value:"StatefulModel",id:"statefulmodel",level:2},{value:"Arguments",id:"arguments",level:4},{value:"Methods",id:"methods",level:3},{value:"Example",id:"example",level:4},{value:"GraphStructure",id:"graphstructure",level:2},{value:"Arguments",id:"arguments-1",level:4},{value:"Example",id:"example-1",level:4}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"To customize a model's architecture, SNNAX provides a simple way to define the structure of the model."}),"\n",(0,t.jsx)(n.p,{children:"SNNAX offers two primary methods for defining the architecture:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/snnax/architecture/intro#statefulmodel",children:(0,t.jsx)(n.code,{children:"snnax.snn.architecture.StatefulModel"})}),": Allows for creating custom SNNs."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/snnax/architecture/composed",children:(0,t.jsx)(n.code,{children:"snnax.snn.composed"})}),": Provides predefined architecture classes that can be used to build your model."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"statefulmodel",children:"StatefulModel"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"StatefulModel"})," class enables the creation of custom SNNs with nearly arbitrary connectivity, defined through a graph structure known as the connectivity graph. It inherits from ",(0,t.jsx)(n.code,{children:"eqx.Module"})," to be a callable pytree."]}),"\n",(0,t.jsx)(n.h4,{id:"arguments",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"graph_structure (GraphStructure)"}),": A ",(0,t.jsx)(n.code,{children:"GraphStructure"})," object that specifies the network topology."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"layers (Sequence[eqx.Module])"}),": The computational building blocks of the model."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"forward_fn (Callable)"}),": The evaluation procedure/loop for the model. Defaults to ",(0,t.jsx)(n.a,{href:"/snnax/functions#default_forward_fn",children:(0,t.jsx)(n.code,{children:"default_forward_fn"})}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"init_state(in_shape, shapes=None, key=PRNGKey)"}),": Initializes the state of the model by recursively calling the init functions of the stateful layers. Non-stateful layers are initialized as ",(0,t.jsx)(n.code,{children:"None"})," and their output shape is computed using a mock input."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"in_shape (Union[Sequence[Tuple[int]], Tuple[int]])"}),": Shape of the input."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"shapes (Union[Sequence[Tuple[int]], None])"}),": Optional shapes for the layers."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"key (PRNGKey)"}),": Random key for initialization."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),": ",(0,t.jsx)(n.code,{children:"Sequence[Array]"})," containing the initial state of the model."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"__call__(input_states, input_batch, key, burnin=0)"}),": The forward function that performs the actual computation when the model is called. Uses ",(0,t.jsx)(n.code,{children:"lax.scan"})," to iterate over the layers."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"input_states (Sequence[jnp.ndarray])"}),": Initial states of the model."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"input_batch"}),": Batch of input data."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"key (jrand.PRNGKey)"}),": Random key for the computation."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"burnin (int)"}),": Number of initial steps to ignore in backpropagation."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),": ",(0,t.jsx)(n.code,{children:"Tuple"})," containing the new states and outputs."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"1. Custom topology"})}),"\n",(0,t.jsxs)(n.p,{children:["First, define the layers, which can be from the ",(0,t.jsx)(n.code,{children:"equinox"})," library or SNNAX's ",(0,t.jsx)(n.a,{href:"/snnax/layers/intro",children:"snnax.snn.layers"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from snnax import snn\r\nimport equinox as eqx\r\n\r\nlayers = [\r\n    eqx.Linear(10, 20),\r\n    eqx.LayerNorm(20),\r\n    snn.LIF()\r\n]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Next, define the ",(0,t.jsx)(n.a,{href:"/snnax/architecture/intro#graphstructure",children:(0,t.jsx)(n.code,{children:"GraphStructure"})})," object, which contains meta-information about the computational graph."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"graph_structure = snn.GraphStructure(\r\n    num_layers=3,\r\n    input_layer_ids=[[0], [], []],\r\n    final_layer_ids=[2],\r\n    input_connectivity=[[2], [0], [1]]\r\n)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Finally, create the ",(0,t.jsx)(n.code,{children:"StatefulModel"})," object by passing the ",(0,t.jsx)(n.code,{children:"graph_structure"})," and ",(0,t.jsx)(n.code,{children:"layers"})," as arguments."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"model = snn.StatefulModel(\r\n    graph_structure=graph_structure,\r\n    layers=layers\r\n)\n"})}),"\n",(0,t.jsx)(n.p,{children:"The model architecture will be as follows:"}),"\n",(0,t.jsx)(n.mermaid,{value:"graph LR;\r\n    Input--\x3eLinear;\r\n    Linear--\x3eLayerNorm;\r\n    LayerNorm--\x3eLIF;\r\n    LIF--\x3eLinear;\r\n    LIF--\x3eOutput;"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"2. Custom Class"})}),"\n",(0,t.jsxs)(n.p,{children:["You can also create a custom class by inheriting from ",(0,t.jsx)(n.code,{children:"StatefulModel"})," and defining the ",(0,t.jsx)(n.code,{children:"__init__"}),", ",(0,t.jsx)(n.code,{children:"init_state"})," or ",(0,t.jsx)(n.code,{children:"__call__"})," methods."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class CustomModel(snn.StatefulModel):\r\n    def __init__(self):\r\n\r\n        # Custom __init__ method\r\n        GraphStructure = snn.GraphStructure(\r\n            num_layers=2,\r\n            input_layer_ids=[[0], []],\r\n            final_layer_ids=[1],\r\n            input_connectivity=[[], [0]]\r\n        )\r\n        layers = [\r\n            eqx.Linear(10, 20),\r\n            snn.LIF()\r\n        ]\r\n        super().__init__(graph_structure, layers)\r\n\r\n    def init_state(self, in_shape, shapes=None, key=PRNGKey):\r\n\r\n        # Custom initialization\r\n        return super().init_state(in_shape, shapes, key)\r\n\r\n    def __call__(self, input_states, input_batch, key, burnin=0):\r\n\r\n        # Custom forward pass\r\n        return super().__call__(input_states, input_batch, key, burnin)\r\n\r\nmodel = CustomModel()\n"})}),"\n",(0,t.jsx)(n.h2,{id:"graphstructure",children:"GraphStructure"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"GraphStructure"})," class contains meta-information about the computational graph and is used with the ",(0,t.jsx)(n.code,{children:"StatefulModel"})," class to construct a computational model."]}),"\n",(0,t.jsx)(n.h4,{id:"arguments-1",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"num_layers (int)"}),": The number of layers in the model."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"input_layer_ids (Sequence[Sequence[int]])"}),": Indices of the layers that receive external input."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"final_layer_ids (Sequence[int])"}),": Indices of the layers whose outputs are desired."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"input_connectivity (Sequence[Sequence[int]])"}),": Specifies how the layers are connected to each other."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"graph_structure = snn.GraphStructure(\r\n    num_layers=5,\r\n    input_layer_ids=[[0], [], [], [0, 1], []],\r\n    final_layer_ids=[4],\r\n    input_connectivity=[[], [0, 2], [1], [2, 3], [3]]\r\n)\n"})}),"\n",(0,t.jsx)(n.p,{children:"The resulting model architecture is:"}),"\n",(0,t.jsx)(n.mermaid,{value:"graph LR;\r\n    Input0--\x3e0;\r\n    Input0--\x3e3;\r\n    Input1--\x3e3;\r\n    0--\x3e1;\r\n    2--\x3e1;\r\n    1--\x3e2;\r\n    2--\x3e3;\r\n    3--\x3e3;\r\n    3--\x3e4;\r\n    4--\x3eOutput;"})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);